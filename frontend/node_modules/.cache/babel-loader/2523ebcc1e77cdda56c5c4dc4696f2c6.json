{"ast":null,"code":"/*!\n  * Bootstrap data.js v5.3.3 (https://getbootstrap.com/)\n  * Copyright 2011-2024 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Data = factory());\n})(this, function () {\n  'use strict';\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap dom/data.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * Constants\n   */\n\n  const elementMap = new Map();\n  const data = {\n    set(element, key, instance) {\n      if (!elementMap.has(element)) {\n        elementMap.set(element, new Map());\n      }\n\n      const instanceMap = elementMap.get(element); // make it clear we only want one instance per element\n      // can be removed later when multiple key/instances are fine to be used\n\n      if (!instanceMap.has(key) && instanceMap.size !== 0) {\n        // eslint-disable-next-line no-console\n        console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);\n        return;\n      }\n\n      instanceMap.set(key, instance);\n    },\n\n    get(element, key) {\n      if (elementMap.has(element)) {\n        return elementMap.get(element).get(key) || null;\n      }\n\n      return null;\n    },\n\n    remove(element, key) {\n      if (!elementMap.has(element)) {\n        return;\n      }\n\n      const instanceMap = elementMap.get(element);\n      instanceMap.delete(key); // free up element references if there are no instances left for an element\n\n      if (instanceMap.size === 0) {\n        elementMap.delete(element);\n      }\n    }\n\n  };\n  return data;\n});","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,CAAC,UAAUA,MAAV,EAAkBC,OAAlB,EAA2B;AAC1B,SAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOC,MAAP,KAAkB,WAAjD,GAA+DA,MAAM,CAACD,OAAP,GAAiBD,OAAO,EAAvF,GACA,OAAOG,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAAvC,GAA6CD,MAAM,CAACH,OAAD,CAAnD,IACCD,MAAM,GAAG,OAAOM,UAAP,KAAsB,WAAtB,GAAoCA,UAApC,GAAiDN,MAAM,IAAIO,IAApE,EAA0EP,MAAM,CAACQ,IAAP,GAAcP,OAAO,EADhG,CADA;AAGD,CAJD,EAIG,IAJH,EAIU,YAAY;AAAE;AAEtB;AACF;AACA;AACA;AACA;AACA;;AAEE;AACF;AACA;;AAEE,QAAMQ,UAAU,GAAG,IAAIC,GAAJ,EAAnB;AACA,QAAMC,IAAI,GAAG;AACXC,OAAG,CAACC,OAAD,EAAUC,GAAV,EAAeC,QAAf,EAAyB;AAC1B,UAAI,CAACN,UAAU,CAACO,GAAX,CAAeH,OAAf,CAAL,EAA8B;AAC5BJ,kBAAU,CAACG,GAAX,CAAeC,OAAf,EAAwB,IAAIH,GAAJ,EAAxB;AACD;;AACD,YAAMO,WAAW,GAAGR,UAAU,CAACS,GAAX,CAAeL,OAAf,CAApB,CAJ0B,CAM1B;AACA;;AACA,UAAI,CAACI,WAAW,CAACD,GAAZ,CAAgBF,GAAhB,CAAD,IAAyBG,WAAW,CAACE,IAAZ,KAAqB,CAAlD,EAAqD;AACnD;AACAC,eAAO,CAACC,KAAR,CAAe,+EAA8EC,KAAK,CAACC,IAAN,CAAWN,WAAW,CAACO,IAAZ,EAAX,EAA+B,CAA/B,CAAkC,GAA/H;AACA;AACD;;AACDP,iBAAW,CAACL,GAAZ,CAAgBE,GAAhB,EAAqBC,QAArB;AACD,KAfU;;AAgBXG,OAAG,CAACL,OAAD,EAAUC,GAAV,EAAe;AAChB,UAAIL,UAAU,CAACO,GAAX,CAAeH,OAAf,CAAJ,EAA6B;AAC3B,eAAOJ,UAAU,CAACS,GAAX,CAAeL,OAAf,EAAwBK,GAAxB,CAA4BJ,GAA5B,KAAoC,IAA3C;AACD;;AACD,aAAO,IAAP;AACD,KArBU;;AAsBXW,UAAM,CAACZ,OAAD,EAAUC,GAAV,EAAe;AACnB,UAAI,CAACL,UAAU,CAACO,GAAX,CAAeH,OAAf,CAAL,EAA8B;AAC5B;AACD;;AACD,YAAMI,WAAW,GAAGR,UAAU,CAACS,GAAX,CAAeL,OAAf,CAApB;AACAI,iBAAW,CAACS,MAAZ,CAAmBZ,GAAnB,EALmB,CAOnB;;AACA,UAAIG,WAAW,CAACE,IAAZ,KAAqB,CAAzB,EAA4B;AAC1BV,kBAAU,CAACiB,MAAX,CAAkBb,OAAlB;AACD;AACF;;AAjCU,GAAb;AAoCA,SAAOF,IAAP;AAED,CAxDD","names":["global","factory","exports","module","define","amd","globalThis","self","Data","elementMap","Map","data","set","element","key","instance","has","instanceMap","get","size","console","error","Array","from","keys","remove","delete"],"sources":["C:/Users/Devan/OneDrive/Desktop/Project_Data_Website/frontend/node_modules/bootstrap/js/dist/dom/data.js"],"sourcesContent":["/*!\n  * Bootstrap data.js v5.3.3 (https://getbootstrap.com/)\n  * Copyright 2011-2024 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Data = factory());\n})(this, (function () { 'use strict';\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap dom/data.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * Constants\n   */\n\n  const elementMap = new Map();\n  const data = {\n    set(element, key, instance) {\n      if (!elementMap.has(element)) {\n        elementMap.set(element, new Map());\n      }\n      const instanceMap = elementMap.get(element);\n\n      // make it clear we only want one instance per element\n      // can be removed later when multiple key/instances are fine to be used\n      if (!instanceMap.has(key) && instanceMap.size !== 0) {\n        // eslint-disable-next-line no-console\n        console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);\n        return;\n      }\n      instanceMap.set(key, instance);\n    },\n    get(element, key) {\n      if (elementMap.has(element)) {\n        return elementMap.get(element).get(key) || null;\n      }\n      return null;\n    },\n    remove(element, key) {\n      if (!elementMap.has(element)) {\n        return;\n      }\n      const instanceMap = elementMap.get(element);\n      instanceMap.delete(key);\n\n      // free up element references if there are no instances left for an element\n      if (instanceMap.size === 0) {\n        elementMap.delete(element);\n      }\n    }\n  };\n\n  return data;\n\n}));\n"]},"metadata":{},"sourceType":"script"}