{"ast":null,"code":"/**\n * @remix-run/router v1.15.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref,\n\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1)); // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex(); // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      } // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n\n\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to); // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    createURL,\n\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (manifest === void 0) {\n    manifest = {};\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded);\n  }\n\n  return matches;\n}\n\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n\n  routes.forEach((route, index) => {\n    var _route$path; // coarse-grain check for optional params\n\n\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\n\n\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments; // Optional path segments are denoted by a trailing `?`\n\n  let isOptional = first.endsWith(\"?\"); // Compute the corresponding required segment: `foo?` -> `foo`\n\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = []; // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\"))); // Then, if this is an optional value, add all child versions without\n\n  if (isOptional) {\n    result.push(...restExploded);\n  } // for absolute paths, ensure `/` instead of empty segment\n\n\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\n\n\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  let path = originalPath;\n\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  } // ensure `/` is added at the beginning if the path is absolute\n\n\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1; // only apply the splat if it's the last segment\n\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\"; // Apply the splat\n\n      return stringify(params[star]);\n    }\n\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    } // Remove any optional markers from optional static segments\n\n\n    return segment.replace(/\\?$/g, \"\");\n  }) // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref; // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    const value = captureGroups[index];\n\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\n\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n} // Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\n\n\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches); // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === matches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1; // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    } // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n\n\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\n\n\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\n\n\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\"; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Routes keyed by ID\n\n\n  let manifest = {}; // Routes in tree format for matching\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\"; // Config driven behavior flags\n\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false\n  }, init.future); // Cleanup function for history\n\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized;\n  let hasLazyRoutes = initialMatches.some(m => m.route.lazy);\n  let hasLoaders = initialMatches.some(m => m.route.loader);\n\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n\n    let isRouteInitialized = m => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) return true; // Explicitly opting-in to running on hydration\n\n      if (m.route.loader.hydrate === true) return false; // Otherwise, initialized if hydrated with data or an error\n\n      return loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined;\n    }; // If errors exist, don't consider routes below the boundary\n\n\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // Should the current navigation enable document.startViewTransition?\n\n  let pendingViewTransitionEnabled = false; // Store applied view transitions so we can apply them on POP\n\n  let appliedViewTransitions = new Map(); // Cleanup function for persisting applied transitions to sessionStorage\n\n  let removePageHideEventListener = null; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Ref-count mounted fetchers so we know when it's ok to clean them up\n\n  let activeFetchers = new Map(); // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n\n  let deletedFetchers = new Set(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n\n  let blockerFunctions = new Map(); // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n\n  let ignoreNextHistoryUpdate = false; // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref; // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1); // Put the blocker into a blocked state\n\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            }); // Re-do the same POP navigation we just blocked\n\n            init.history.go(delta);\n          },\n\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n\n        });\n        return;\n      }\n\n      return startNavigation(historyAction, location);\n    });\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    } // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    state = _extends({}, state, newState); // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    } // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n\n\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: opts.viewTransitionOpts,\n      unstable_flushSync: opts.flushSync === true\n    })); // Remove idle fetchers from state since we only care about in-flight fetchers.\n\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    } // Always preserve any existing loaderData from re-used routes\n\n\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData; // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n\n    let blockers = state.blockers;\n\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    } // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n\n\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts; // On POP, enable transitions if they were enabled on the original navigation\n\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    }); // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          }); // Send the same navigation through\n\n          navigate(to, opts);\n        },\n\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true; // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    } // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n\n\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace,\n        flushSync\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false; // Create a GET request for the loaders\n\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace;\n\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission); // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId; // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n\n\n    if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n    }\n\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    }); // Proxy navigation abort through to revalidation fetchers\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    }); // During partial hydration, preserve SSR errors for routes that don't re-run\n\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors).filter(_ref2 => {\n        let [id] = _ref2;\n        return !matchesToLoad.some(m => m.route.id === id);\n      }).forEach(_ref3 => {\n        let [routeId, error] = _ref3;\n        errors = Object.assign(errors || {}, {\n          [routeId]: error\n        });\n      });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, flushSync, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    } // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n\n\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } // Let SuccessResult's fall through for revalidation\n\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(state, actionResult, {\n            fetcherSubmission: submission\n          });\n        }\n      } // Process any non-redirect errors thrown\n\n\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    ); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n\n      return startRedirectNavigation(state, redirect.result);\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds); // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath); // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n\n\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(state, redirect, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload = // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n\n        return;\n      }\n    } // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    } // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n\n\n    let activeSubmission = submission || fetcherSubmission;\n\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1); // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key); // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  } // Utility function to update blockers, ensuring valid state transitions\n\n\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER; // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n\n  function shouldBlockNavigation(_ref4) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref4;\n\n    if (blockerFunctions.size === 0) {\n      return;\n    } // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n\n\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    } // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n\n\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null; // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n\n    return location.key;\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n\n    get future() {\n      return future;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    get window() {\n      return routerWindow;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  } // Config driven behavior flags\n\n\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request, _temp3) {\n    let {\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n\n    if (isResponse(result)) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n\n\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext, match);\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      var _result$activeDeferre;\n\n      let data = Object.values(result.loaderData)[0];\n\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n\n      if (isRouteRequest) {\n        throw error;\n      }\n\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    } // Create a GET request for the loaders\n\n\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy); // Short circuit if we have no loaders to run (query())\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    } // Process and commit output from loaders\n\n\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds); // Add a null for any non-loader matches for proper revalidation on the client\n\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\n\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\n\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n\n    for (let match of matches) {\n      contextualMatches.push(match);\n\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  } // Resolve the relative path\n\n\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\"); // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  } // Add an ?index param for matched index routes if we don't already have one\n\n\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  } // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n\n\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  }); // Create a Submission on non-GET navigations\n\n\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref5) => {\n        let [name, value] = _ref5;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path); // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location); // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (route.loader.hydrate) {\n        return true;\n      }\n\n      return state.loaderData[route.id] === undefined && ( // Don't re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    } // Always call the loader on new route instances and pending defer cancellations\n\n\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    } // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n\n\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate: // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  }); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename); // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    } // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n\n\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\n\n\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy(); // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\"); // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n\n  let routeUpdates = {};\n\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined && // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  } // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n\n\n  Object.assign(routeToUpdate, routeUpdates); // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, v7_relativeSplatPath, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  let resultType;\n  let result;\n  let onReject;\n\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n\n    onReject = () => reject();\n\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([// If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n\n        if (handlerError) {\n          throw handlerError;\n        }\n\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  if (isResponse(result)) {\n    let status = result.status; // Process redirects\n\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in internal redirects\n\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location, v7_relativeSplatPath);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      } // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n\n    let data;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n} // Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\n\n\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission; // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n\n  return formData;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {}; // Prefer higher error values if lower errors bubble to the same boundary\n\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      } // Clear our any prior loaderData for the throwing route\n\n\n      loaderData[id] = undefined; // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      } // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  for (let match of matches) {\n    let id = match.route.id;\n\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\n\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\n\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\n\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  } // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n\n\n  return false;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\n\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\n\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\n\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\n\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\n\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {// no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };","map":{"version":3,"mappings":"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","names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","String","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","hasLazyRoutes","m","lazy","hasLoaders","loader","errors","isRouteInitialized","hydrate","findIndex","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","getLoadingNavigation","Request","handleLoaders","fetcherSubmission","getSubmittingNavigation","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","revalidatingFetcher","getLoadingFetcher","abortFetcher","abortPendingFetchRevalidations","f","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","fetcherKey","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResult","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp2","redirectLocation","isDocumentReload","reloadDocument","redirectHistoryAction","currentMatches","fetchersToLoad","all","resolveDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref4","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","v7_throwAbortReason","query","_temp3","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp4","find","values","_result$activeDeferre","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","isRouteRequest","isStaticRequest","throwStaticHandlerAbortedError","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref5","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryId","boundaryMatches","isInitialLoad","currentUrl","nextUrl","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","resultType","onReject","runHandler","handler","handlerError","protocol","isSameBasename","queryRouteResponse","contentType","isDeferredData","_result$init","_result$init2","deferred","foundError","newLoaderData","mergedLoaderData","eligibleMatches","reverse","_temp5","errorMessage","obj","signals","isRevalidatingLoader","unwrap","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","setItem","UNSAFE_DeferredData","UNSAFE_ErrorResponseImpl","UNSAFE_convertRouteMatchToUiMatch","UNSAFE_convertRoutesToDataRoutes","UNSAFE_getResolveToMatches","UNSAFE_invariant","UNSAFE_warning"],"sources":["C:/Users/Devan/OneDrive/Desktop/Cultivating Data/frontend/node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.15.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === matches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized;\n  let hasLazyRoutes = initialMatches.some(m => m.route.lazy);\n  let hasLoaders = initialMatches.some(m => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = m => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) return true;\n      // Explicitly opting-in to running on hydration\n      if (m.route.loader.hydrate === true) return false;\n      // Otherwise, initialized if hydrated with data or an error\n      return loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined;\n    };\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: opts.viewTransitionOpts,\n      unstable_flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors).filter(_ref2 => {\n        let [id] = _ref2;\n        return !matchesToLoad.some(m => m.route.id === id);\n      }).forEach(_ref3 => {\n        let [routeId, error] = _ref3;\n        errors = Object.assign(errors || {}, {\n          [routeId]: error\n        });\n      });\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, flushSync, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(state, actionResult, {\n            fetcherSubmission: submission\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref4) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref4;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref5) => {\n        let [name, value] = _ref5;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (isInitialLoad) {\n      if (route.loader.hydrate) {\n        return true;\n      }\n      return state.loaderData[route.id] === undefined && (\n      // Don't re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, v7_relativeSplatPath, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location, v7_relativeSplatPath);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };\n"]},"metadata":{},"sourceType":"module"}