{"ast":null,"code":"/*!\n  * Bootstrap config.js v5.3.3 (https://getbootstrap.com/)\n  * Copyright 2011-2024 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('../dom/manipulator.js'), require('./index.js')) : typeof define === 'function' && define.amd ? define(['../dom/manipulator', './index'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Config = factory(global.Manipulator, global.Index));\n})(this, function (Manipulator, index_js) {\n  'use strict';\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/config.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n  /**\n   * Class definition\n   */\n\n  class Config {\n    // Getters\n    static get Default() {\n      return {};\n    }\n\n    static get DefaultType() {\n      return {};\n    }\n\n    static get NAME() {\n      throw new Error('You have to implement the static method \"NAME\", for each component!');\n    }\n\n    _getConfig(config) {\n      config = this._mergeConfigObj(config);\n      config = this._configAfterMerge(config);\n\n      this._typeCheckConfig(config);\n\n      return config;\n    }\n\n    _configAfterMerge(config) {\n      return config;\n    }\n\n    _mergeConfigObj(config, element) {\n      const jsonConfig = index_js.isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {}; // try to parse\n\n      return { ...this.constructor.Default,\n        ...(typeof jsonConfig === 'object' ? jsonConfig : {}),\n        ...(index_js.isElement(element) ? Manipulator.getDataAttributes(element) : {}),\n        ...(typeof config === 'object' ? config : {})\n      };\n    }\n\n    _typeCheckConfig(config) {\n      let configTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.constructor.DefaultType;\n\n      for (const [property, expectedTypes] of Object.entries(configTypes)) {\n        const value = config[property];\n        const valueType = index_js.isElement(value) ? 'element' : index_js.toType(value);\n\n        if (!new RegExp(expectedTypes).test(valueType)) {\n          throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`);\n        }\n      }\n    }\n\n  }\n\n  return Config;\n});","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,CAAC,UAAUA,MAAV,EAAkBC,OAAlB,EAA2B;AAC1B,SAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOC,MAAP,KAAkB,WAAjD,GAA+DA,MAAM,CAACD,OAAP,GAAiBD,OAAO,CAACG,OAAO,CAAC,uBAAD,CAAR,EAAmCA,OAAO,CAAC,YAAD,CAA1C,CAAvF,GACA,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAAvC,GAA6CD,MAAM,CAAC,CAAC,oBAAD,EAAuB,SAAvB,CAAD,EAAoCJ,OAApC,CAAnD,IACCD,MAAM,GAAG,OAAOO,UAAP,KAAsB,WAAtB,GAAoCA,UAApC,GAAiDP,MAAM,IAAIQ,IAApE,EAA0ER,MAAM,CAACS,MAAP,GAAgBR,OAAO,CAACD,MAAM,CAACU,WAAR,EAAqBV,MAAM,CAACW,KAA5B,CADlG,CADA;AAGD,CAJD,EAIG,IAJH,EAIU,UAAUD,WAAV,EAAuBE,QAAvB,EAAiC;AAAE;AAE3C;AACF;AACA;AACA;AACA;AACA;;AAGE;AACF;AACA;;AAEE,QAAMH,MAAN,CAAa;AACX;AACkB,eAAPI,OAAO,GAAG;AACnB,aAAO,EAAP;AACD;;AACqB,eAAXC,WAAW,GAAG;AACvB,aAAO,EAAP;AACD;;AACc,eAAJC,IAAI,GAAG;AAChB,YAAM,IAAIC,KAAJ,CAAU,qEAAV,CAAN;AACD;;AACDC,cAAU,CAACC,MAAD,EAAS;AACjBA,YAAM,GAAG,KAAKC,eAAL,CAAqBD,MAArB,CAAT;AACAA,YAAM,GAAG,KAAKE,iBAAL,CAAuBF,MAAvB,CAAT;;AACA,WAAKG,gBAAL,CAAsBH,MAAtB;;AACA,aAAOA,MAAP;AACD;;AACDE,qBAAiB,CAACF,MAAD,EAAS;AACxB,aAAOA,MAAP;AACD;;AACDC,mBAAe,CAACD,MAAD,EAASI,OAAT,EAAkB;AAC/B,YAAMC,UAAU,GAAGX,QAAQ,CAACY,SAAT,CAAmBF,OAAnB,IAA8BZ,WAAW,CAACe,gBAAZ,CAA6BH,OAA7B,EAAsC,QAAtC,CAA9B,GAAgF,EAAnG,CAD+B,CACwE;;AAEvG,aAAO,EACL,GAAG,KAAKI,WAAL,CAAiBb,OADf;AAEL,YAAI,OAAOU,UAAP,KAAsB,QAAtB,GAAiCA,UAAjC,GAA8C,EAAlD,CAFK;AAGL,YAAIX,QAAQ,CAACY,SAAT,CAAmBF,OAAnB,IAA8BZ,WAAW,CAACiB,iBAAZ,CAA8BL,OAA9B,CAA9B,GAAuE,EAA3E,CAHK;AAIL,YAAI,OAAOJ,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsC,EAA1C;AAJK,OAAP;AAMD;;AACDG,oBAAgB,CAACH,MAAD,EAAqD;AAAA,UAA5CU,WAA4C,uEAA9B,KAAKF,WAAL,CAAiBZ,WAAa;;AACnE,WAAK,MAAM,CAACe,QAAD,EAAWC,aAAX,CAAX,IAAwCC,MAAM,CAACC,OAAP,CAAeJ,WAAf,CAAxC,EAAqE;AACnE,cAAMK,KAAK,GAAGf,MAAM,CAACW,QAAD,CAApB;AACA,cAAMK,SAAS,GAAGtB,QAAQ,CAACY,SAAT,CAAmBS,KAAnB,IAA4B,SAA5B,GAAwCrB,QAAQ,CAACuB,MAAT,CAAgBF,KAAhB,CAA1D;;AACA,YAAI,CAAC,IAAIG,MAAJ,CAAWN,aAAX,EAA0BO,IAA1B,CAA+BH,SAA/B,CAAL,EAAgD;AAC9C,gBAAM,IAAII,SAAJ,CAAe,GAAE,KAAKZ,WAAL,CAAiBX,IAAjB,CAAsBwB,WAAtB,EAAoC,aAAYV,QAAS,oBAAmBK,SAAU,wBAAuBJ,aAAc,IAA5I,CAAN;AACD;AACF;AACF;;AAtCU;;AAyCb,SAAOrB,MAAP;AAED,CA7DD","names":["global","factory","exports","module","require","define","amd","globalThis","self","Config","Manipulator","Index","index_js","Default","DefaultType","NAME","Error","_getConfig","config","_mergeConfigObj","_configAfterMerge","_typeCheckConfig","element","jsonConfig","isElement","getDataAttribute","constructor","getDataAttributes","configTypes","property","expectedTypes","Object","entries","value","valueType","toType","RegExp","test","TypeError","toUpperCase"],"sources":["C:/Users/Devan/OneDrive/Desktop/Cultivating Data/frontend/node_modules/bootstrap/js/dist/util/config.js"],"sourcesContent":["/*!\n  * Bootstrap config.js v5.3.3 (https://getbootstrap.com/)\n  * Copyright 2011-2024 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('../dom/manipulator.js'), require('./index.js')) :\n  typeof define === 'function' && define.amd ? define(['../dom/manipulator', './index'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Config = factory(global.Manipulator, global.Index));\n})(this, (function (Manipulator, index_js) { 'use strict';\n\n  /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/config.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */\n\n\n  /**\n   * Class definition\n   */\n\n  class Config {\n    // Getters\n    static get Default() {\n      return {};\n    }\n    static get DefaultType() {\n      return {};\n    }\n    static get NAME() {\n      throw new Error('You have to implement the static method \"NAME\", for each component!');\n    }\n    _getConfig(config) {\n      config = this._mergeConfigObj(config);\n      config = this._configAfterMerge(config);\n      this._typeCheckConfig(config);\n      return config;\n    }\n    _configAfterMerge(config) {\n      return config;\n    }\n    _mergeConfigObj(config, element) {\n      const jsonConfig = index_js.isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {}; // try to parse\n\n      return {\n        ...this.constructor.Default,\n        ...(typeof jsonConfig === 'object' ? jsonConfig : {}),\n        ...(index_js.isElement(element) ? Manipulator.getDataAttributes(element) : {}),\n        ...(typeof config === 'object' ? config : {})\n      };\n    }\n    _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {\n      for (const [property, expectedTypes] of Object.entries(configTypes)) {\n        const value = config[property];\n        const valueType = index_js.isElement(value) ? 'element' : index_js.toType(value);\n        if (!new RegExp(expectedTypes).test(valueType)) {\n          throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`);\n        }\n      }\n    }\n  }\n\n  return Config;\n\n}));\n"]},"metadata":{},"sourceType":"script"}